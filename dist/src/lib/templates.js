"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const HB = require("handlebars");
const fs_1 = require("fs");
const path_1 = require("path");
const consola_1 = require("consola");
// Constants
const TEMPLATE_EXTENSION = '.tpl';
const JS_EXTENSION = '.js';
const SEPARATOR = '-';
/**
 * Formats single-digit numbers with a leading zero.
 * @param number {number} Number to format.
 * @return {string} Formatted number.
 */
const formatSingleDigit = (number) => {
    return number < 10 ? `0${number}` : number.toString();
};
/**
 * Gets the current timestamp in YYYYMMDDHHmmss format.
 * @return {string} Formatted timestamp.
 */
const getCurrentTimestamp = () => {
    const date = new Date();
    return [
        date.getUTCFullYear(),
        formatSingleDigit(date.getUTCMonth() + 1),
        formatSingleDigit(date.getUTCDate()),
        formatSingleDigit(date.getUTCHours()),
        formatSingleDigit(date.getUTCMinutes()),
        formatSingleDigit(date.getUTCSeconds()),
    ].join('');
};
/**
 * Generates migration filename based on template name and data.
 * @param templateName {TemplateTypes} Type of template.
 * @param data {TemplateData} Template data.
 * @return {string} Generated filename.
 */
const generateFileName = (templateName, { tableName, columnName }) => {
    const timestamp = getCurrentTimestamp();
    switch (templateName) {
        case 'createTable':
            return `${timestamp}${SEPARATOR}create${SEPARATOR}${tableName}${JS_EXTENSION}`;
        case 'removeTable':
            return `${timestamp}${SEPARATOR}remove${SEPARATOR}${tableName}${JS_EXTENSION}`;
        case 'addColumn':
            return `${timestamp}${SEPARATOR}add${SEPARATOR}${columnName}${SEPARATOR}to${SEPARATOR}${tableName}${JS_EXTENSION}`;
        case 'removeColumn':
            return `${timestamp}${SEPARATOR}remove${SEPARATOR}${columnName}${SEPARATOR}from${SEPARATOR}${tableName}${JS_EXTENSION}`;
        case 'modifyColumn':
            return `${timestamp}${SEPARATOR}modify${SEPARATOR}${columnName}${SEPARATOR}on${SEPARATOR}${tableName}${JS_EXTENSION}`;
        default:
            return `${timestamp}${SEPARATOR}migration${JS_EXTENSION}`;
    }
};
/**
 * Registers Handlebars helper for formatting attributes.
 */
const registerHandlebarsHelper = () => {
    HB.registerHelper('formatAttributes', (attributes, indent) => {
        const formatValue = (key, value) => {
            if (key === 'type')
                return `Sequelize.${value}`;
            switch (typeof value) {
                case 'string':
                    return `'${value}'`;
                case 'object':
                    return JSON.stringify(value)
                        .replace(/"([^"]+)":/g, '$1:')
                        .replace(/"/g, "'");
                default:
                    return String(value); // This should take care of the type error for 'value'.
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { Model, _modelAttribute, field, _autoGenerated } = attributes, rest = __rest(attributes, ["Model", "_modelAttribute", "field", "_autoGenerated"]);
        return (Object.keys(rest)
            .filter(key => typeof rest[key] !== 'function')
            .map(attr => `${attr}: ${formatValue(attr, attributes[attr])}`)
            .join(`,\n${' '.repeat(Number(indent))}`) + ',');
    });
};
/**
 * Renders the template with given data and writes it to specified path.
 * @param templateName {TemplateTypes} Type of template.
 * @param data {TemplateData} Template data.
 * @param migrationsPath {string} Path to write the file.
 */
const renderTemplate = (templateName, data, migrationsPath) => __awaiter(void 0, void 0, void 0, function* () {
    // await sleep(1000);
    const templatePath = (0, path_1.resolve)(__dirname, '../../templates', `${templateName}${TEMPLATE_EXTENSION}`);
    if (!(0, fs_1.existsSync)(templatePath)) {
        throw new Error(`Template not found: ${templateName}`);
    }
    registerHandlebarsHelper();
    const templateContent = (0, fs_1.readFileSync)(templatePath).toString();
    const renderedContent = HB.compile(templateContent)(data);
    const fileName = generateFileName(templateName, data);
    (0, fs_1.writeFileSync)((0, path_1.join)(migrationsPath, fileName), renderedContent);
    consola_1.default.success(`${fileName} Created!`);
});
exports.default = renderTemplate;
//# sourceMappingURL=templates.js.map